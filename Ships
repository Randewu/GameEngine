using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Drawing;

class Generate
{
    void Points()
    {
        for (int i = 0; i < 3; i++)
        { 
            
        }
    }
}

public class Clas
{
    public Dictionary<string, string> Classes= new Dictionary<string, string>(){
        {"Кварц", "Белый 0 0 0"},
        {"Гелиодор", "Жёлтый 2 2 0"},
        {"Сапфир", "Синий 5 2 3"},
        {"Рубин", "Красный 10 6 4"}
    }; 
    public Clas(string Class)
    {
        string[] data = Classes[Class].Split(' ');// получение данных по классу из словаря
        this.Name = Class;
        this.Color = data[0];
        this.BonusPower = Convert.ToInt16(data[1]);
        this.constBonus =Convert.ToInt16(data[2]);
        this.RandBon = Convert.ToInt16(data[3]);
    }
    public string Name { set; get; }
    public string Color{ set; get; }// public Color Color; пока на тест так, потом цвета подключим
    public int BonusPower { set; get; }
    public int constBonus { set; get; } // статичный коэфицент бонуса
    public int RandBon { set; get; } //коэфицинт случайого кубика
    // public double GetRandom; пока хз как реализовать 
   
    public int CalcBonusClass()
    {
        Random rnd = new Random();
        if (RandBon!=0)
            return constBonus + (int)(rnd.NextInt64(1, RandBon+1));
        else
            return constBonus;
    }
    public string Info(){
        return string.Format("Класс: {0}\nЦвет: {1}\nБонус к силе: {2}\nСлучайный бонус: {3}\n", this.Name, this.Color,this.BonusPower,this.CalcBonusClass());
    }
}
public class Rang
{
    public Dictionary<string, string> Rangs= new Dictionary<string, string>(){
        {"Корвет", "1 1 0"},
        {"Фрегат", "2 0 2"},
        {"Эсминец", "3 0 3"},
        {"Крейсер", "5 2 3"},
        {"Дредноут", "10 5 5"}
    }; 
    public Rang(string Rang)
    {
        string[] info = Rangs[Rang].Split(' ');// получение данных по рангу из словаря
        this.Name = Rang;
        this.Ranq =Convert.ToInt16(info[0]);
        this.PowerConst =Convert.ToInt16(info[1]);
        this.PowerRandom =Convert.ToInt16(info[2]);
    }
    public string Name { set; get; }
    public int Ranq { set; get; }
    public int PowerConst { set; get; } // Постоянная часть силы
    public int PowerRandom { set; get; } // Рандомная часть силы
    // public double GetRandom; пока тоже хз с реализацией
    
    public int CalcBonusRang()
    {
        Random rnd = new Random();
        if (PowerRandom !=0)
            return PowerConst + (int)(rnd.NextInt64(1, PowerRandom+1));
        else
            return PowerConst;
    }
    public string Info(){
        return string.Format("Название: {0}\nРанг: {1}\nСила: {2}\n", this.Name, this.Ranq,this.CalcBonusRang());
    }
}
public class Ship // класс корабля
{
    public Clas Clas;
    public Rang Rang;
    public Ship(string Class_Rang)
    {
        Clas = new Clas(Class_Rang.Split('_')[0]);
        Rang = new Rang(Class_Rang.Split('_')[1]);
    }
    public void info(){
        Console.WriteLine(Clas.Info()+ Rang.Info());
    }
}
public class Player
{
    public Ship[] Rezerv;
    public Player()
    {
        Rezerv = new Ship[10];
    }
}
public class Land // класс поля
{
    public Ship[] Pole;  // уникальное поле

    public Land()
    {
        Pole = new Ship[9];// создаем 9 ячеек под корабли
    }
}

 class Input // Вход
{
    public static Land Land;
    public static Player[] Players;
    public static void Inicialization(int countPlayers)// получаем количество игроков и инициализируем 
    {
        Land = new Land();
        Players = new Player[countPlayers];
    }
}

public class Engine // Механика
{ 
    
    public static void SetShip(Ship ship, int number) // установка корабля в ячейку
    {
        if (Input.Land.Pole[number] == null)
        Input.Land.Pole[number] = ship;
    }
    public static void GetShip(Player player, Ship ship) // возврат корабля в резерв
    {
        for (int i = 0; i < 10; i++)
        {
            if (player.Rezerv[i] == null)
            {
                player.Rezerv[i] = ship;
                break;
            }
        }
    }
}
